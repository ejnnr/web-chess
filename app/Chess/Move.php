<?php namespace App\Chess;

/**
 * Contains the classes Move and MoveException
 */

/**
 * Promotion value representing a promotion to a knight
 *
 * This is also used for no promotion.
 */
define('App\Chess\PROMOTION_QUEEN', 1);
/**
 * Promotion value representing a promotion to a knight
 */
define('App\Chess\PROMOTION_ROOK', 2);
/**
 * Promotion value representing a promotion to a knight
 */
define('App\Chess\PROMOTION_BISHOP', 3);

/**
 * Promotion value representing a promotion to a knight
 */
define('App\Chess\PROMOTION_KNIGHT', 4);
/**
 * A class respresenting a exception thrown by Move
 *
 * List of Exception Codes:
 *  1: Unknown internal error
 *  2: Null argument
 *  3: Wrong argument count
 *  4: Wrong argument type
 *  5: Invalid argument value (general)
 *  6: Invalid argument syntax (strings)
 *  7: Numerical argument outside of allowed range
 */

class MoveException extends \Exception {}

/**
 * A class respresenting a chess move.
 */

class Move
{

	/**
	 * The departure square.
	 *
	 * This is an integer generated by string2square()
	 */

	private $departure;

	/**
	 * The destination square.
	 *
	 * This is an integer generated by string2square()
	 */

	private $destination;

	/**
	 * The promotion
	 *
	 * Can have the following values:
	 *  * PROMOTION_QUEEN:  1
	 *  * PROMOTION_ROOK:   2
	 *  * PROMOTION_BISHOP: 3
	 *  * PROMOTION_KNIGHT: 4
	 * If the move is a non-promoting move, PROMOTION_QUEEN is used.
	 */

	private $promotion;

	/**
 	 * An array of NAG values between 0 and 256
 	 *
 	 * For a list of NAG values see http://www6.chessclub.com/help/PGN-spec
 	 * It is possible although not recommended to set several contradictory NAGs (e.g. 1 (good move) and 2 (poor move)).
 	 */

	private $NAGs;

	/**
	 * Constructor of Move.
	 *
	 * Sets up all private variables.
	 *
	 * @param mixed  $departure   square of departure; can be: string ('a1'), integer generated by string2square (0) or array ([$file, $rank]) with file and rank count starting at zero
	 * @param mixed  $destination destination square; can be: string ('a1'), integer generated by string2square (0) or array ([$file, $rank]) with file and rank count starting at zero
	 * @param string $promotion   either 1 (Queen), 2 (Rook), 3 (Bishop) or 4 (Knight); If left out, 1 will be used; if the move is non-promoting, use 1
	 * @param int[]  $NAGs        an array of valid NAG values (integers from 0 to 255). It is not recommended to use 0 or any number higher than 139. See http://www6.chessclub.com/help/PGN-spec
	 */

	function __construct($departure, $destination, $promotion = PROMOTION_QUEEN, $NAGs = array(), $comment = '')
	{
		// check if departure or destination exist
		if ((!isset($departure))
		 || (!isset($destination))) {
			throw new MoveException('__construct: departure and destination must not be null', 2);
		}

		// check wich square format departure is and parse it
		if (is_int($departure)) {
			if (validateSquare($departure)) {
				$this->departure = $departure;
			} else {
				throw new MoveException('__construct: departure has an invalid value.', 5);
			}
		} elseif (is_string($departure)) {
			$departure = string2square($departure);
			if ($departure !== FALSE) {
				$this->departure = $departure;
			} else {
				throw new MoveException('__construct: departure has an invalid value.', 5);
			}
		} elseif (is_array($departure)) {
			$departure = array2square($departure);
			if ($departure !== FALSE) {
				$this->departure = $departure;
			} else {
				throw new MoveException('__construct: departure has an invalid value.', 5);
			}
		} else {
			throw new MoveException('__construct: departure is neither string nor integer nor array', 4);
		}

		// check wich square format destination is and parse it
		if (is_int($destination)) {
			if (validateSquare($destination)) {
				$this->destination = $destination;
			} else {
				throw new MoveException('__construct: destination has an invalid value.', 5);
			}
		} elseif (is_string($destination)) {
			$destination = string2square($destination);
			if ($destination !== FALSE) {
				$this->destination = $destination;
			} else {
				throw new MoveException('__construct: destination has an invalid value.', 5);
			}
		} elseif (is_array($destination)) {
			$destination = array2square($destination);
			if ($destination !== FALSE) {
				$this->destination = $destination;
			} else {
				throw new MoveException('__construct: destination has an invalid value.', 5);
			}
		} else {
			throw new MoveException('__construct: destination is neither string nor integer nor array', 4);
		}

		if (empty($promotion)) {
			$promotion = PROMOTION_QUEEN;
		}

		if (is_string($promotion)) {
			switch ($promotion) {
				case 'Q':
					$promotion = PROMOTION_QUEEN;
					break;
				case 'R':
					$promotion = PROMOTION_ROOK;
					break;
				case 'B':
					$promotion = PROMOTION_BISHOP;
					break;
				case 'N':
					$promotion = PROMOTION_KNIGHT;
					break;
			}
		}

		if (!is_integer($promotion)) {
			throw new MoveException('__construct: promotion is no integer', 4);
		}

		if (!(0 < $promotion && $promotion < 5)) {
			throw new MoveException('__construct: promotion is not in the allowed range', 7);
		}
		$this->promotion = $promotion;

		$this->setNAGs($NAGs);

		$this->setComment($comment);
	}

	/**
	 * Returns the departure square.
	 *
	 * You can specify the format you want the square to be returned in.
	 *
	 * @param int $format the format for the square; can be SQUARE_FORMAT_INT, SQUARE_FORMAT_STRING or SQUARE_FORMAT_ARRAY
	 */

	function getDeparture($format = SQUARE_FORMAT_INT)
	{
		switch ($format) {
			case SQUARE_FORMAT_INT:
				return $this->departure;
			case SQUARE_FORMAT_STRING:
				return square2string($this->departure);
			case SQUARE_FORMAT_ARRAY:
				return square2array($this->departure);
			default:
				throw new MoveException('getDeparture: format must be either 0, 1 or 2', 7);
		}
	}

	/**
	 * Returns the destination square.
	 *
	 * You can specify the format you want the square to be returned in.
	 *
	 * @param int $format the format for the square; can be SQUARE_FORMAT_INT, SQUARE_FORMAT_STRING or SQUARE_FORMAT_ARRAY
	 */

	function getDestination($format = SQUARE_FORMAT_INT)
	{
		switch ($format) {
			case SQUARE_FORMAT_INT:
				return $this->destination;
			case SQUARE_FORMAT_STRING:
				return square2string($this->destination);
			case SQUARE_FORMAT_ARRAY:
				return square2array($this->destination);
			default:
				throw new MoveException('getDestination: format must be either 0, 1 or 2', 7);
		}
	}

	/**
	 * Returns the type of promotion
	 *
	 * @return integer Either 1 (Queen), 2 (Rook), 3 (Bishop) or 4 (Knight); if the move is non-promoting, 1 is returned;
	 */

	function getPromotion() {
		return $this->promotion;
	}
	
	/**
	 * Returns an array of all NAGs that are set
	 *
	 * @return int[] An array of all the Numerical Annotation Symbols (NAGs) set for the move. They are sorted from lowest to highest.
	 */

	function getNAGs() {
		return $this->NAGs;
	}

	/**
	 * Returns the comment on the move or an empty string
	 *
	 * @return string The comment or an empty string if no comment exists
	 */
	function getComment() {
		return $this->comment;
	}

	/**
	 * Set the comment
	 *
	 * @param string $comment
	 * @return void
	 */
	function setComment($comment) {
		if (!is_string($comment)) {
			throw new MoveException('setComment: comment must be a string', 4);
		}

		$this->comment = $comment;
	}

	/**
	 * overwrites the NAG array with the one given
	 *
	 * @param int[] $NAGs
	 * @return void
	 */
	function setNAGs($NAGs) {
		if (!is_array($NAGs)) {
			throw new MoveException('setNAGs: NAGs is no array', 4);
		}

		$this->NAGs = array();
		foreach ($NAGs as $nag) {
			$this->addNAG($nag);
		}
		sort($this->NAGs); // sort array from lowest to highest
	}

	/**
	 * Add one NAG and leave the rest intact
	 *
	 * @param int $NAG
	 * @return void
	 */
	function addNAG($nag) {
			if (!is_integer($nag)) {
				throw new MoveException('addNAG: NAG is no integer', 4);
			}

			if (!(0 <= $nag && $nag < 256)) { // note that NAGs above 140 aren't defined, but since some programs use them, they are also supported by web-chess
				throw new MoveException('addNAG: NAG is not in the allowed range', 7);
			}
			if (!in_array($nag, $this->NAGs)) { // don't add NAG if already present
				$this->NAGs[] = $nag; // add NAG
			} else {
				throw new MoveException('addNAG: ' . $nag . ' is already present in NAGs', 5); // TODO: define new exception code?
			}
	}
}
